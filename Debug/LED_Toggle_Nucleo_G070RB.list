
LED_Toggle_Nucleo_G070RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003064  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a4  080031a4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031a4  080031a4  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031a4  080031a4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a4  080031a4  000041a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031a8  080031a8  000041a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080031b8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080031b8  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f92e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002101  00000000  00000000  00014962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00016a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8a  00000000  00000000  000177c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015541  00000000  00000000  0001824a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001060a  00000000  00000000  0002d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad0b  00000000  00000000  0003dd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8aa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003050  00000000  00000000  000c8ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cbb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003104 	.word	0x08003104

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003104 	.word	0x08003104

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <TimerOverflow>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int TimerOverflow(TIM_HandleTypeDef *htim) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

  return (htim->Instance->SR & TIM_SR_UIF) ;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	001a      	movs	r2, r3
 80003fc:	2301      	movs	r3, #1
 80003fe:	4013      	ands	r3, r2

}
 8000400:	0018      	movs	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	b002      	add	sp, #8
 8000406:	bd80      	pop	{r7, pc}

08000408 <StartTimer>:

void StartTimer()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	 htim1.Instance->CNT = 0;
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <StartTimer+0x1c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	@ 0x24
	 HAL_TIM_Base_Start_IT(&htim1);
 8000414:	4b03      	ldr	r3, [pc, #12]	@ (8000424 <StartTimer+0x1c>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fd04 	bl	8001e24 <HAL_TIM_Base_Start_IT>
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	20000028 	.word	0x20000028

08000428 <StopTimer>:

void StopTimer()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim1);
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <StopTimer+0x1c>)
 800042e:	0018      	movs	r0, r3
 8000430:	f001 fcd2 	bl	8001dd8 <HAL_TIM_Base_Stop>
	htim1.Instance->CNT = 0;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <StopTimer+0x1c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	20000028 	.word	0x20000028

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fb13 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f8b5 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 f9a7 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800045a:	f000 f957 	bl	800070c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800045e:	f000 f8f7 	bl	8000650 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int switch_cnt = 1;
 8000462:	2301      	movs	r3, #1
 8000464:	60fb      	str	r3, [r7, #12]
    int interrupt_instances = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
    int Input_staus =0;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
    bool timer_status = false;
 800046e:	1cfb      	adds	r3, r7, #3
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN WHILE */

    while (1)
    {
      /* USER CODE END WHILE */
  	  Input_staus = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000474:	23a0      	movs	r3, #160	@ 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	2140      	movs	r1, #64	@ 0x40
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fdc4 	bl	8001008 <HAL_GPIO_ReadPin>
 8000480:	0003      	movs	r3, r0
 8000482:	607b      	str	r3, [r7, #4]
  	  if(timer_status == false)
 8000484:	1cfb      	adds	r3, r7, #3
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2201      	movs	r2, #1
 800048a:	4053      	eors	r3, r2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d100      	bne.n	8000494 <main+0x4c>
 8000492:	e08e      	b.n	80005b2 <main+0x16a>
  	  {
  		  StartTimer();
 8000494:	f7ff ffb8 	bl	8000408 <StartTimer>
  		  timer_status =true;
 8000498:	1cfb      	adds	r3, r7, #3
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
  	  }
  	  	  while (Input_staus)
 800049e:	e088      	b.n	80005b2 <main+0x16a>
  	  	  {
  	  		  switch (switch_cnt){
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d06a      	beq.n	800057c <main+0x134>
 80004a6:	1cfb      	adds	r3, r7, #3
 80004a8:	1cfa      	adds	r2, r7, #3
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	dd00      	ble.n	80004b6 <main+0x6e>
 80004b4:	e07d      	b.n	80005b2 <main+0x16a>
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d007      	beq.n	80004cc <main+0x84>
 80004bc:	1cfb      	adds	r3, r7, #3
 80004be:	1cfa      	adds	r2, r7, #3
 80004c0:	7812      	ldrb	r2, [r2, #0]
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d02f      	beq.n	800052a <main+0xe2>
 80004ca:	e072      	b.n	80005b2 <main+0x16a>
  	  			case 1 :
  	  				HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 80004cc:	23a0      	movs	r3, #160	@ 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2120      	movs	r1, #32
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fdd2 	bl	800107c <HAL_GPIO_TogglePin>
  	  				if (TimerOverflow(&htim1)) {
 80004d8:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <main+0x174>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f7ff ff86 	bl	80003ec <TimerOverflow>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d022      	beq.n	800052a <main+0xe2>
  	  					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004e4:	23a0      	movs	r3, #160	@ 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2120      	movs	r1, #32
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fdc6 	bl	800107c <HAL_GPIO_TogglePin>
  	  					interrupt_instances++;
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60bb      	str	r3, [r7, #8]
  	  					StopTimer();
 80004f6:	f7ff ff97 	bl	8000428 <StopTimer>
  	  					timer_status =false;
 80004fa:	1cfb      	adds	r3, r7, #3
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
  	  					if(interrupt_instances == 4){
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b04      	cmp	r3, #4
 8000504:	d111      	bne.n	800052a <main+0xe2>
  	  						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000506:	23a0      	movs	r3, #160	@ 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2120      	movs	r1, #32
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fdb5 	bl	800107c <HAL_GPIO_TogglePin>
  	  						interrupt_instances =0;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  	  						Input_staus =0;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  	  						StopTimer();
 800051a:	f7ff ff85 	bl	8000428 <StopTimer>
  	  						timer_status =false;
 800051e:	1cfb      	adds	r3, r7, #3
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
  	  						switch_cnt ++;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3301      	adds	r3, #1
 8000528:	60fb      	str	r3, [r7, #12]
  	  					}
  	  				}

  	  			case 2:
  	  				HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5); 	// turn on the LED
 800052a:	23a0      	movs	r3, #160	@ 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2120      	movs	r1, #32
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fda3 	bl	800107c <HAL_GPIO_TogglePin>
  	  				if (TimerOverflow(&htim1)) { 				// CHECK IF THE TIMER HA SGENERATED INTERRUPT
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <main+0x174>)
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff57 	bl	80003ec <TimerOverflow>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d01c      	beq.n	800057c <main+0x134>
  	  					interrupt_instances++;					//COUNT OF HOW MANY TIMES THE INTERRUPT IS GENERATED
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	3301      	adds	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  	  					StopTimer();
 8000548:	f7ff ff6e 	bl	8000428 <StopTimer>
  	  					timer_status =false;						// CLEAR THE TIMER
 800054c:	1cfb      	adds	r3, r7, #3
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
  	  					if(interrupt_instances == 2){
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d111      	bne.n	800057c <main+0x134>
  	  						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// TURN OFF THE LED
 8000558:	23a0      	movs	r3, #160	@ 0xa0
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	2120      	movs	r1, #32
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fd8c 	bl	800107c <HAL_GPIO_TogglePin>
  	  						interrupt_instances =0;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  	  						Input_staus =0;
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
  	  						StopTimer();
 800056c:	f7ff ff5c 	bl	8000428 <StopTimer>
  	  						timer_status =false;
 8000570:	1cfb      	adds	r3, r7, #3
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
  	  						switch_cnt ++;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
  	  					}
  	  				 }

  	  			case 3:
  	  				HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800057c:	23a0      	movs	r3, #160	@ 0xa0
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fd7a 	bl	800107c <HAL_GPIO_TogglePin>
  	  				if (TimerOverflow(&htim1)) { 			// CHECK IF THE TIMER HAS GENERATED INTERRUPT
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <main+0x174>)
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff ff2e 	bl	80003ec <TimerOverflow>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d00e      	beq.n	80005b2 <main+0x16a>
  	  					  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// TURN OFF THE LED
 8000594:	23a0      	movs	r3, #160	@ 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	2120      	movs	r1, #32
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fd6e 	bl	800107c <HAL_GPIO_TogglePin>
  	  					  StopTimer();
 80005a0:	f7ff ff42 	bl	8000428 <StopTimer>
  	  					  timer_status =false;
 80005a4:	1cfb      	adds	r3, r7, #3
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
  	  					  Input_staus =0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  	  					  switch_cnt =1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
  	  	  while (Input_staus)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d000      	beq.n	80005ba <main+0x172>
 80005b8:	e772      	b.n	80004a0 <main+0x58>
  	  Input_staus = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80005ba:	e75b      	b.n	8000474 <main+0x2c>
 80005bc:	20000028 	.word	0x20000028

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b093      	sub	sp, #76	@ 0x4c
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	2414      	movs	r4, #20
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2334      	movs	r3, #52	@ 0x34
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fd6b 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	0018      	movs	r0, r3
 80005da:	2310      	movs	r3, #16
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fd64 	bl	80030ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fd63 	bl	80010b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	2202      	movs	r2, #2
 80005f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2240      	movs	r2, #64	@ 0x40
 8000606:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fd9b 	bl	800114c <HAL_RCC_OscConfig>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800061a:	f000 f925 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2207      	movs	r2, #7
 8000622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2100      	movs	r1, #0
 800063a:	0018      	movs	r0, r3
 800063c:	f001 f896 	bl	800176c <HAL_RCC_ClockConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000644:	f000 f910 	bl	8000868 <Error_Handler>
  }
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b013      	add	sp, #76	@ 0x4c
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	2310      	movs	r3, #16
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	2310      	movs	r3, #16
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 fd23 	bl	80030ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	230c      	movs	r3, #12
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 fd1c 	bl	80030ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <MX_TIM1_Init+0xac>)
 8000676:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <MX_TIM1_Init+0xb0>)
 8000678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_TIM1_Init+0xac>)
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_TIM1_Init+0xb4>)
 800067e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_TIM1_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 31999;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM1_Init+0xac>)
 8000688:	4a1f      	ldr	r2, [pc, #124]	@ (8000708 <MX_TIM1_Init+0xb8>)
 800068a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_TIM1_Init+0xac>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM1_Init+0xac>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_TIM1_Init+0xac>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_TIM1_Init+0xac>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fb41 	bl	8001d28 <HAL_TIM_Base_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80006aa:	f000 f8dd 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	2110      	movs	r1, #16
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	0152      	lsls	r2, r2, #5
 80006b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_TIM1_Init+0xac>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fd0e 	bl	80020e0 <HAL_TIM_ConfigClockSource>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006c8:	f000 f8ce 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_TIM1_Init+0xac>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 ff19 	bl	800251c <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006ee:	f000 f8bb 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b008      	add	sp, #32
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	20000028 	.word	0x20000028
 8000700:	40012c00 	.word	0x40012c00
 8000704:	000003e7 	.word	0x000003e7
 8000708:	00007cff 	.word	0x00007cff

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000712:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <MX_USART2_UART_Init+0x98>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000718:	22e1      	movs	r2, #225	@ 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000720:	2280      	movs	r2, #128	@ 0x80
 8000722:	0552      	lsls	r2, r2, #21
 8000724:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000726:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000734:	220c      	movs	r2, #12
 8000736:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000758:	0018      	movs	r0, r3
 800075a:	f001 ff5f 	bl	800261c <HAL_UART_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000762:	f000 f881 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fbbe 	bl	8002eec <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000774:	f000 f878 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fbf5 	bl	8002f6c <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000786:	f000 f86f 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_USART2_UART_Init+0x94>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fb73 	bl	8002e78 <HAL_UARTEx_DisableFifoMode>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 f867 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000074 	.word	0x20000074
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 fc77 	bl	80030ac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2204      	movs	r2, #4
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007dc:	2120      	movs	r1, #32
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e6:	2220      	movs	r2, #32
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_GPIO_Init+0xbc>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000806:	23a0      	movs	r3, #160	@ 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fc17 	bl	8001042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2220      	movs	r2, #32
 8000818:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2201      	movs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2202      	movs	r2, #2
 800082a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800082c:	193a      	adds	r2, r7, r4
 800082e:	23a0      	movs	r3, #160	@ 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fa83 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch_Input_Pin */
  GPIO_InitStruct.Pin = Switch_Input_Pin;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2240      	movs	r2, #64	@ 0x40
 800083e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Switch_Input_GPIO_Port, &GPIO_InitStruct);
 800084c:	193a      	adds	r2, r7, r4
 800084e:	23a0      	movs	r3, #160	@ 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fa73 	bl	8000d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b009      	add	sp, #36	@ 0x24
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x44>)
 800087c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_MspInit+0x44>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	641a      	str	r2, [r3, #64]	@ 0x40
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_MspInit+0x44>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x44>)
 8000894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x44>)
 8000898:	2180      	movs	r1, #128	@ 0x80
 800089a:	0549      	lsls	r1, r1, #21
 800089c:	430a      	orrs	r2, r1
 800089e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_MspInit+0x44>)
 80008a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	055b      	lsls	r3, r3, #21
 80008a8:	4013      	ands	r3, r2
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <HAL_TIM_Base_MspInit+0x48>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d115      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	0109      	lsls	r1, r1, #4
 80008d8:	430a      	orrs	r2, r1
 80008da:	641a      	str	r2, [r3, #64]	@ 0x40
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	200d      	movs	r0, #13
 80008f0:	f000 f9f4 	bl	8000cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80008f4:	200d      	movs	r0, #13
 80008f6:	f000 fa06 	bl	8000d06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40012c00 	.word	0x40012c00
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b091      	sub	sp, #68	@ 0x44
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	232c      	movs	r3, #44	@ 0x2c
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fbc4 	bl	80030ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	2410      	movs	r4, #16
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	231c      	movs	r3, #28
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fbbc 	bl	80030ac <memset>
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <HAL_UART_MspInit+0xb8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d13e      	bne.n	80009bc <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	193b      	adds	r3, r7, r4
 800094c:	0018      	movs	r0, r3
 800094e:	f001 f8b7 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000956:	f7ff ff87 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800095c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800096a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0xbc>)
 8000984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098e:	212c      	movs	r1, #44	@ 0x2c
 8000990:	187b      	adds	r3, r7, r1
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2202      	movs	r2, #2
 800099a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	187a      	adds	r2, r7, r1
 80009b0:	23a0      	movs	r3, #160	@ 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f9c2 	bl	8000d40 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b011      	add	sp, #68	@ 0x44
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40021000 	.word	0x40021000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8aa 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fa62 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	20000028 	.word	0x20000028

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f7ff fff6 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f002 fb33 	bl	80030bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a56:	f7ff fcf7 	bl	8000448 <main>

08000a5a <LoopForever>:

LoopForever:
  b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	080031ac 	.word	0x080031ac
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	2000010c 	.word	0x2000010c

08000a74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_Init+0x3c>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_Init+0x3c>)
 8000a8a:	2180      	movs	r1, #128	@ 0x80
 8000a8c:	0049      	lsls	r1, r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f810 	bl	8000ab8 <HAL_InitTick>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e001      	b.n	8000aa8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fee6 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <HAL_InitTick+0x88>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d02b      	beq.n	8000b28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_InitTick+0x8c>)
 8000ad2:	681c      	ldr	r4, [r3, #0]
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <HAL_InitTick+0x88>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0019      	movs	r1, r3
 8000ada:	23fa      	movs	r3, #250	@ 0xfa
 8000adc:	0098      	lsls	r0, r3, #2
 8000ade:	f7ff fb0f 	bl	8000100 <__udivsi3>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff fb0a 	bl	8000100 <__udivsi3>
 8000aec:	0003      	movs	r3, r0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f919 	bl	8000d26 <HAL_SYSTICK_Config>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d112      	bne.n	8000b1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d80a      	bhi.n	8000b14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f8e8 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_InitTick+0x90>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e00d      	b.n	8000b30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	781b      	ldrb	r3, [r3, #0]
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b005      	add	sp, #20
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000108 	.word	0x20000108

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	@ (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	20000108 	.word	0x20000108

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b96:	d809      	bhi.n	8000bac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	231f      	movs	r3, #31
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <__NVIC_EnableIRQ+0x30>)
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	000a      	movs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bcc:	d828      	bhi.n	8000c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bce:	4a2f      	ldr	r2, [pc, #188]	@ (8000c8c <__NVIC_SetPriority+0xd4>)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	33c0      	adds	r3, #192	@ 0xc0
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	589b      	ldr	r3, [r3, r2]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	@ 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	@ 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <__NVIC_SetPriority+0xd4>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	430a      	orrs	r2, r1
 8000c18:	33c0      	adds	r3, #192	@ 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1e:	e031      	b.n	8000c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3306      	adds	r3, #6
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1dfa      	adds	r2, r7, #7
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	0011      	movs	r1, r2
 8000c40:	2203      	movs	r2, #3
 8000c42:	400a      	ands	r2, r1
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	21ff      	movs	r1, #255	@ 0xff
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	43d2      	mvns	r2, r2
 8000c4e:	401a      	ands	r2, r3
 8000c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	22ff      	movs	r2, #255	@ 0xff
 8000c58:	401a      	ands	r2, r3
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2303      	movs	r3, #3
 8000c62:	4003      	ands	r3, r0
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c68:	4809      	ldr	r0, [pc, #36]	@ (8000c90 <__NVIC_SetPriority+0xd8>)
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	001c      	movs	r4, r3
 8000c70:	230f      	movs	r3, #15
 8000c72:	4023      	ands	r3, r4
 8000c74:	3b08      	subs	r3, #8
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	3306      	adds	r3, #6
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	18c3      	adds	r3, r0, r3
 8000c80:	3304      	adds	r3, #4
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b003      	add	sp, #12
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	045b      	lsls	r3, r3, #17
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d301      	bcc.n	8000cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e010      	b.n	8000cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	2103      	movs	r1, #3
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff ff7c 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <SysTick_Config+0x44>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff33 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ffaf 	bl	8000c94 <SysTick_Config>
 8000d36:	0003      	movs	r3, r0
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e147      	b.n	8000fe0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x28>
 8000d66:	e138      	b.n	8000fda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x40>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	43da      	mvns	r2, r3
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	0013      	movs	r3, r2
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	2201      	movs	r2, #1
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d017      	beq.n	8000e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	58d3      	ldr	r3, [r2, r3]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2107      	movs	r1, #7
 8000e56:	400b      	ands	r3, r1
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	6939      	ldr	r1, [r7, #16]
 8000e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	401a      	ands	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x174>
 8000eb2:	e092      	b.n	8000fda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eb4:	4a50      	ldr	r2, [pc, #320]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3318      	adds	r3, #24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	589b      	ldr	r3, [r3, r2]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	220f      	movs	r2, #15
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	23a0      	movs	r3, #160	@ 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1ca>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a45      	ldr	r2, [pc, #276]	@ (8000ffc <HAL_GPIO_Init+0x2bc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1c6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a44      	ldr	r2, [pc, #272]	@ (8001000 <HAL_GPIO_Init+0x2c0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1c2>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a43      	ldr	r2, [pc, #268]	@ (8001004 <HAL_GPIO_Init+0x2c4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1be>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	2103      	movs	r1, #3
 8000f10:	400a      	ands	r2, r1
 8000f12:	00d2      	lsls	r2, r2, #3
 8000f14:	4093      	lsls	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f1c:	4936      	ldr	r1, [pc, #216]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3318      	adds	r3, #24
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	039b      	lsls	r3, r3, #14
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000f80:	2384      	movs	r3, #132	@ 0x84
 8000f82:	58d3      	ldr	r3, [r2, r3]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa4:	4914      	ldr	r1, [pc, #80]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	2284      	movs	r2, #132	@ 0x84
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd2:	4909      	ldr	r1, [pc, #36]	@ (8000ff8 <HAL_GPIO_Init+0x2b8>)
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	40da      	lsrs	r2, r3
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	d000      	beq.n	8000fee <HAL_GPIO_Init+0x2ae>
 8000fec:	e6b0      	b.n	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021800 	.word	0x40021800
 8000ffc:	50000400 	.word	0x50000400
 8001000:	50000800 	.word	0x50000800
 8001004:	50000c00 	.word	0x50000c00

08001008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	000a      	movs	r2, r1
 8001012:	1cbb      	adds	r3, r7, #2
 8001014:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	1cba      	adds	r2, r7, #2
 800101c:	8812      	ldrh	r2, [r2, #0]
 800101e:	4013      	ands	r3, r2
 8001020:	d004      	beq.n	800102c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001022:	230f      	movs	r3, #15
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e003      	b.n	8001034 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800102c:	230f      	movs	r3, #15
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	0008      	movs	r0, r1
 800104c:	0011      	movs	r1, r2
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	1c02      	adds	r2, r0, #0
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	1c7b      	adds	r3, r7, #1
 8001056:	1c0a      	adds	r2, r1, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800105a:	1c7b      	adds	r3, r7, #1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001062:	1cbb      	adds	r3, r7, #2
 8001064:	881a      	ldrh	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800106a:	e003      	b.n	8001074 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106c:	1cbb      	adds	r3, r7, #2
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	000a      	movs	r2, r1
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001090:	1cbb      	adds	r3, r7, #2
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	041a      	lsls	r2, r3, #16
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	1cb9      	adds	r1, r7, #2
 80010a0:	8809      	ldrh	r1, [r1, #0]
 80010a2:	400b      	ands	r3, r1
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	619a      	str	r2, [r3, #24]
}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d11f      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	0013      	movs	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	189b      	adds	r3, r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4912      	ldr	r1, [pc, #72]	@ (8001130 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff f80a 	bl	8000100 <__udivsi3>
 80010ec:	0003      	movs	r3, r0
 80010ee:	3301      	adds	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f2:	e008      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e001      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e009      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	401a      	ands	r2, r3
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	429a      	cmp	r2, r3
 8001116:	d0ed      	beq.n	80010f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	40007000 	.word	0x40007000
 8001128:	fffff9ff 	.word	0xfffff9ff
 800112c:	20000000 	.word	0x20000000
 8001130:	000f4240 	.word	0x000f4240

08001134 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <LL_RCC_GetAPB1Prescaler+0x14>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	23e0      	movs	r3, #224	@ 0xe0
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4013      	ands	r3, r2
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e2f3      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	d100      	bne.n	800116a <HAL_RCC_OscConfig+0x1e>
 8001168:	e07c      	b.n	8001264 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116a:	4bc3      	ldr	r3, [pc, #780]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2238      	movs	r2, #56	@ 0x38
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001174:	4bc0      	ldr	r3, [pc, #768]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2203      	movs	r2, #3
 800117a:	4013      	ands	r3, r2
 800117c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b10      	cmp	r3, #16
 8001182:	d102      	bne.n	800118a <HAL_RCC_OscConfig+0x3e>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d002      	beq.n	8001190 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b08      	cmp	r3, #8
 800118e:	d10b      	bne.n	80011a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	4bb9      	ldr	r3, [pc, #740]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	4013      	ands	r3, r2
 800119a:	d062      	beq.n	8001262 <HAL_RCC_OscConfig+0x116>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d15e      	bne.n	8001262 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e2ce      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d107      	bne.n	80011c4 <HAL_RCC_OscConfig+0x78>
 80011b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4baf      	ldr	r3, [pc, #700]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	0249      	lsls	r1, r1, #9
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e020      	b.n	8001206 <HAL_RCC_OscConfig+0xba>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	23a0      	movs	r3, #160	@ 0xa0
 80011ca:	02db      	lsls	r3, r3, #11
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d10e      	bne.n	80011ee <HAL_RCC_OscConfig+0xa2>
 80011d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	02c9      	lsls	r1, r1, #11
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	4ba6      	ldr	r3, [pc, #664]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4ba5      	ldr	r3, [pc, #660]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	0249      	lsls	r1, r1, #9
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0xba>
 80011ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011f4:	49a1      	ldr	r1, [pc, #644]	@ (800147c <HAL_RCC_OscConfig+0x330>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	4b9f      	ldr	r3, [pc, #636]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001200:	499f      	ldr	r1, [pc, #636]	@ (8001480 <HAL_RCC_OscConfig+0x334>)
 8001202:	400a      	ands	r2, r1
 8001204:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d014      	beq.n	8001238 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fcaf 	bl	8000b70 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcaa 	bl	8000b70 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e28d      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122a:	4b93      	ldr	r3, [pc, #588]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xcc>
 8001236:	e015      	b.n	8001264 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc9a 	bl	8000b70 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001242:	f7ff fc95 	bl	8000b70 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	@ 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e278      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0xf6>
 8001260:	e000      	b.n	8001264 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001262:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d100      	bne.n	8001270 <HAL_RCC_OscConfig+0x124>
 800126e:	e099      	b.n	80013a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001270:	4b81      	ldr	r3, [pc, #516]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2238      	movs	r2, #56	@ 0x38
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127a:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2203      	movs	r2, #3
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b10      	cmp	r3, #16
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x144>
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d002      	beq.n	8001296 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d135      	bne.n	8001302 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001296:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x162>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e24b      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b72      	ldr	r3, [pc, #456]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a74      	ldr	r2, [pc, #464]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	021a      	lsls	r2, r3, #8
 80012be:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d112      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001488 <HAL_RCC_OscConfig+0x33c>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	4b67      	ldr	r3, [pc, #412]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012de:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0adb      	lsrs	r3, r3, #11
 80012e4:	2207      	movs	r2, #7
 80012e6:	4013      	ands	r3, r2
 80012e8:	4a68      	ldr	r2, [pc, #416]	@ (800148c <HAL_RCC_OscConfig+0x340>)
 80012ea:	40da      	lsrs	r2, r3
 80012ec:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x344>)
 80012ee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f0:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x348>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff fbdf 	bl	8000ab8 <HAL_InitTick>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d051      	beq.n	80013a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e221      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d030      	beq.n	800136c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800130a:	4b5b      	ldr	r3, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5e      	ldr	r2, [pc, #376]	@ (8001488 <HAL_RCC_OscConfig+0x33c>)
 8001310:	4013      	ands	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800131e:	4b56      	ldr	r3, [pc, #344]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0049      	lsls	r1, r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fc20 	bl	8000b70 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fc1b 	bl	8000b70 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1fe      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001348:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4013      	ands	r3, r2
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b48      	ldr	r3, [pc, #288]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a4a      	ldr	r2, [pc, #296]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800135a:	4013      	ands	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	021a      	lsls	r2, r3, #8
 8001364:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	e01b      	b.n	80013a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800136c:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001372:	4949      	ldr	r1, [pc, #292]	@ (8001498 <HAL_RCC_OscConfig+0x34c>)
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fbfa 	bl	8000b70 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fbf5 	bl	8000b70 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1d8      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001394:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4013      	ands	r3, r2
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x236>
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2208      	movs	r2, #8
 80013aa:	4013      	ands	r3, r2
 80013ac:	d047      	beq.n	800143e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013ae:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2238      	movs	r2, #56	@ 0x38
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b18      	cmp	r3, #24
 80013b8:	d10a      	bne.n	80013d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d03c      	beq.n	800143e <HAL_RCC_OscConfig+0x2f2>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d138      	bne.n	800143e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e1ba      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d019      	beq.n	800140c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80013da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fbc4 	bl	8000b70 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ee:	f7ff fbbf 	bl	8000b70 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1a2      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d0f1      	beq.n	80013ee <HAL_RCC_OscConfig+0x2a2>
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 800140e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fbaa 	bl	8000b70 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fba5 	bl	8000b70 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e188      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f1      	bne.n	8001422 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2204      	movs	r2, #4
 8001444:	4013      	ands	r3, r2
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x2fe>
 8001448:	e0c6      	b.n	80015d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	231f      	movs	r3, #31
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2238      	movs	r2, #56	@ 0x38
 8001458:	4013      	ands	r3, r2
 800145a:	2b20      	cmp	r3, #32
 800145c:	d11e      	bne.n	800149c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_RCC_OscConfig+0x32c>)
 8001460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d100      	bne.n	800146a <HAL_RCC_OscConfig+0x31e>
 8001468:	e0b6      	b.n	80015d8 <HAL_RCC_OscConfig+0x48c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d000      	beq.n	8001474 <HAL_RCC_OscConfig+0x328>
 8001472:	e0b1      	b.n	80015d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e166      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
 8001478:	40021000 	.word	0x40021000
 800147c:	fffeffff 	.word	0xfffeffff
 8001480:	fffbffff 	.word	0xfffbffff
 8001484:	ffff80ff 	.word	0xffff80ff
 8001488:	ffffc7ff 	.word	0xffffc7ff
 800148c:	00f42400 	.word	0x00f42400
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004
 8001498:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800149c:	4bac      	ldr	r3, [pc, #688]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800149e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	4013      	ands	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x360>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x362>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d011      	beq.n	80014d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4ba7      	ldr	r3, [pc, #668]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80014b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	0549      	lsls	r1, r1, #21
 80014bc:	430a      	orrs	r2, r1
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c0:	4ba3      	ldr	r3, [pc, #652]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80014c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014ce:	231f      	movs	r3, #31
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001754 <HAL_RCC_OscConfig+0x608>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	d11a      	bne.n	8001518 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e2:	4b9c      	ldr	r3, [pc, #624]	@ (8001754 <HAL_RCC_OscConfig+0x608>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b9b      	ldr	r3, [pc, #620]	@ (8001754 <HAL_RCC_OscConfig+0x608>)
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	0049      	lsls	r1, r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb3e 	bl	8000b70 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fb39 	bl	8000b70 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e11c      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150c:	4b91      	ldr	r3, [pc, #580]	@ (8001754 <HAL_RCC_OscConfig+0x608>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x3e2>
 8001520:	4b8b      	ldr	r3, [pc, #556]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001522:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001524:	4b8a      	ldr	r3, [pc, #552]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x41c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x404>
 8001536:	4b86      	ldr	r3, [pc, #536]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800153a:	4b85      	ldr	r3, [pc, #532]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800153c:	2104      	movs	r1, #4
 800153e:	430a      	orrs	r2, r1
 8001540:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001542:	4b83      	ldr	r3, [pc, #524]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001544:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001546:	4b82      	ldr	r3, [pc, #520]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x41c>
 8001550:	4b7f      	ldr	r3, [pc, #508]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001552:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001554:	4b7e      	ldr	r3, [pc, #504]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800155c:	4b7c      	ldr	r3, [pc, #496]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800155e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001560:	4b7b      	ldr	r3, [pc, #492]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001562:	2104      	movs	r1, #4
 8001564:	438a      	bics	r2, r1
 8001566:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d014      	beq.n	800159a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fafe 	bl	8000b70 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001578:	e009      	b.n	800158e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff faf9 	bl	8000b70 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a74      	ldr	r2, [pc, #464]	@ (8001758 <HAL_RCC_OscConfig+0x60c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0db      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158e:	4b70      	ldr	r3, [pc, #448]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x42e>
 8001598:	e013      	b.n	80015c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fae9 	bl	8000b70 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a2:	e009      	b.n	80015b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fae4 	bl	8000b70 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001758 <HAL_RCC_OscConfig+0x60c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e0c6      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b8:	4b65      	ldr	r3, [pc, #404]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015c2:	231f      	movs	r3, #31
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b60      	ldr	r3, [pc, #384]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015d2:	4962      	ldr	r1, [pc, #392]	@ (800175c <HAL_RCC_OscConfig+0x610>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x496>
 80015e0:	e0b0      	b.n	8001744 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2238      	movs	r2, #56	@ 0x38
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d100      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4a4>
 80015ee:	e078      	b.n	80016e2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d153      	bne.n	80016a0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b55      	ldr	r3, [pc, #340]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b54      	ldr	r3, [pc, #336]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80015fe:	4958      	ldr	r1, [pc, #352]	@ (8001760 <HAL_RCC_OscConfig+0x614>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fab4 	bl	8000b70 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff faaf 	bl	8000b70 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e092      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001620:	4b4b      	ldr	r3, [pc, #300]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	049b      	lsls	r3, r3, #18
 8001628:	4013      	ands	r3, r2
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	4b48      	ldr	r3, [pc, #288]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <HAL_RCC_OscConfig+0x618>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1a      	ldr	r2, [r3, #32]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	431a      	orrs	r2, r3
 8001654:	4b3e      	ldr	r3, [pc, #248]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001656:	430a      	orrs	r2, r1
 8001658:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165a:	4b3d      	ldr	r3, [pc, #244]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b3c      	ldr	r3, [pc, #240]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001660:	2180      	movs	r1, #128	@ 0x80
 8001662:	0449      	lsls	r1, r1, #17
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 800166e:	2180      	movs	r1, #128	@ 0x80
 8001670:	0549      	lsls	r1, r1, #21
 8001672:	430a      	orrs	r2, r1
 8001674:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fa7b 	bl	8000b70 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa76 	bl	8000b70 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e059      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x534>
 800169e:	e051      	b.n	8001744 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016a6:	492e      	ldr	r1, [pc, #184]	@ (8001760 <HAL_RCC_OscConfig+0x614>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa60 	bl	8000b70 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fa5b 	bl	8000b70 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e03e      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	049b      	lsls	r3, r3, #18
 80016d0:	4013      	ands	r3, r2
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016da:	4923      	ldr	r1, [pc, #140]	@ (8001768 <HAL_RCC_OscConfig+0x61c>)
 80016dc:	400a      	ands	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	e030      	b.n	8001744 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e02b      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_RCC_OscConfig+0x604>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2203      	movs	r2, #3
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11e      	bne.n	8001740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2270      	movs	r2, #112	@ 0x70
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d117      	bne.n	8001740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	23fe      	movs	r3, #254	@ 0xfe
 8001714:	01db      	lsls	r3, r3, #7
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d10e      	bne.n	8001740 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	23f8      	movs	r3, #248	@ 0xf8
 8001726:	039b      	lsls	r3, r3, #14
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	0f5b      	lsrs	r3, r3, #29
 8001736:	075a      	lsls	r2, r3, #29
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b008      	add	sp, #32
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	40021000 	.word	0x40021000
 8001754:	40007000 	.word	0x40007000
 8001758:	00001388 	.word	0x00001388
 800175c:	efffffff 	.word	0xefffffff
 8001760:	feffffff 	.word	0xfeffffff
 8001764:	1fc1808c 	.word	0x1fc1808c
 8001768:	effefffc 	.word	0xeffefffc

0800176c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0e9      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b76      	ldr	r3, [pc, #472]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2207      	movs	r2, #7
 8001786:	4013      	ands	r3, r2
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d91e      	bls.n	80017cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2207      	movs	r2, #7
 8001794:	4393      	bics	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	4b70      	ldr	r3, [pc, #448]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017a0:	f7ff f9e6 	bl	8000b70 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017a8:	e009      	b.n	80017be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017aa:	f7ff f9e1 	bl	8000b70 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001960 <HAL_RCC_ClockConfig+0x1f4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0ca      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017be:	4b67      	ldr	r3, [pc, #412]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1ee      	bne.n	80017aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2204      	movs	r2, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	d006      	beq.n	80017ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017e0:	4b60      	ldr	r3, [pc, #384]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	21e0      	movs	r1, #224	@ 0xe0
 80017e8:	01c9      	lsls	r1, r1, #7
 80017ea:	430a      	orrs	r2, r1
 80017ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <HAL_RCC_ClockConfig+0x1fc>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	d057      	beq.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d12b      	bne.n	8001878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e097      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d107      	bne.n	800183c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182c:	4b4d      	ldr	r3, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	049b      	lsls	r3, r3, #18
 8001834:	4013      	ands	r3, r2
 8001836:	d11f      	bne.n	8001878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e08b      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001844:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4013      	ands	r3, r2
 800184e:	d113      	bne.n	8001878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e07f      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d106      	bne.n	800186a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d108      	bne.n	8001878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e074      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	4b3e      	ldr	r3, [pc, #248]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 800186c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e06d      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001878:	4b3a      	ldr	r3, [pc, #232]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2207      	movs	r2, #7
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188c:	f7ff f970 	bl	8000b70 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001894:	e009      	b.n	80018aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001896:	f7ff f96b 	bl	8000b70 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <HAL_RCC_ClockConfig+0x1f4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e054      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2238      	movs	r2, #56	@ 0x38
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1ec      	bne.n	8001896 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2207      	movs	r2, #7
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d21e      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2207      	movs	r2, #7
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b21      	ldr	r3, [pc, #132]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018dc:	f7ff f948 	bl	8000b70 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f943 	bl	8000b70 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_RCC_ClockConfig+0x1f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e02c      	b.n	8001954 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2207      	movs	r2, #7
 8001900:	4013      	ands	r3, r2
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d1ee      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2204      	movs	r2, #4
 800190e:	4013      	ands	r3, r2
 8001910:	d009      	beq.n	8001926 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001912:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4a15      	ldr	r2, [pc, #84]	@ (800196c <HAL_RCC_ClockConfig+0x200>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001926:	f000 f829 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800192a:	0001      	movs	r1, r0
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_RCC_ClockConfig+0x1f8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	220f      	movs	r2, #15
 8001934:	401a      	ands	r2, r3
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_RCC_ClockConfig+0x204>)
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	58d3      	ldr	r3, [r2, r3]
 800193c:	221f      	movs	r2, #31
 800193e:	4013      	ands	r3, r2
 8001940:	000a      	movs	r2, r1
 8001942:	40da      	lsrs	r2, r3
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_RCC_ClockConfig+0x208>)
 8001946:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_ClockConfig+0x20c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff f8b3 	bl	8000ab8 <HAL_InitTick>
 8001952:	0003      	movs	r3, r0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40022000 	.word	0x40022000
 8001960:	00001388 	.word	0x00001388
 8001964:	40021000 	.word	0x40021000
 8001968:	fffff0ff 	.word	0xfffff0ff
 800196c:	ffff8fff 	.word	0xffff8fff
 8001970:	0800311c 	.word	0x0800311c
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	4b3c      	ldr	r3, [pc, #240]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2238      	movs	r2, #56	@ 0x38
 8001988:	4013      	ands	r3, r2
 800198a:	d10f      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800198c:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0adb      	lsrs	r3, r3, #11
 8001992:	2207      	movs	r2, #7
 8001994:	4013      	ands	r3, r2
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	4835      	ldr	r0, [pc, #212]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a2:	f7fe fbad 	bl	8000100 <__udivsi3>
 80019a6:	0003      	movs	r3, r0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e05d      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2238      	movs	r2, #56	@ 0x38
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d102      	bne.n	80019be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019b8:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x100>)
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e054      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2238      	movs	r2, #56	@ 0x38
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d138      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2203      	movs	r2, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	2207      	movs	r2, #7
 80019dc:	4013      	ands	r3, r2
 80019de:	3301      	adds	r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d10d      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	4824      	ldr	r0, [pc, #144]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0x100>)
 80019ec:	f7fe fb88 	bl	8000100 <__udivsi3>
 80019f0:	0003      	movs	r3, r0
 80019f2:	0019      	movs	r1, r3
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	227f      	movs	r2, #127	@ 0x7f
 80019fc:	4013      	ands	r3, r2
 80019fe:	434b      	muls	r3, r1
 8001a00:	617b      	str	r3, [r7, #20]
        break;
 8001a02:	e00d      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a08:	f7fe fb7a 	bl	8000100 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	227f      	movs	r2, #127	@ 0x7f
 8001a18:	4013      	ands	r3, r2
 8001a1a:	434b      	muls	r3, r1
 8001a1c:	617b      	str	r3, [r7, #20]
        break;
 8001a1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0f5b      	lsrs	r3, r3, #29
 8001a26:	2207      	movs	r2, #7
 8001a28:	4013      	ands	r3, r2
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7fe fb65 	bl	8000100 <__udivsi3>
 8001a36:	0003      	movs	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	e015      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2238      	movs	r2, #56	@ 0x38
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b20      	cmp	r3, #32
 8001a46:	d103      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2238      	movs	r2, #56	@ 0x38
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d103      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a5c:	23fa      	movs	r3, #250	@ 0xfa
 8001a5e:	01db      	lsls	r3, r3, #7
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e001      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a68:	693b      	ldr	r3, [r7, #16]
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b006      	add	sp, #24
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	40021000 	.word	0x40021000
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200

08001a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b02      	ldr	r3, [pc, #8]	@ (8001a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a98:	f7ff fff2 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001a9c:	0004      	movs	r4, r0
 8001a9e:	f7ff fb49 	bl	8001134 <LL_RCC_GetAPB1Prescaler>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	0b1a      	lsrs	r2, r3, #12
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	58d3      	ldr	r3, [r2, r3]
 8001aac:	221f      	movs	r2, #31
 8001aae:	4013      	ands	r3, r2
 8001ab0:	40dc      	lsrs	r4, r3
 8001ab2:	0023      	movs	r3, r4
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	0800315c 	.word	0x0800315c

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ac8:	2313      	movs	r3, #19
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ae4:	e0a3      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2011      	movs	r0, #17
 8001ae8:	183b      	adds	r3, r7, r0
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b86      	ldr	r3, [pc, #536]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	055b      	lsls	r3, r3, #21
 8001af6:	4013      	ands	r3, r2
 8001af8:	d110      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b83      	ldr	r3, [pc, #524]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001afe:	4b82      	ldr	r3, [pc, #520]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	0549      	lsls	r1, r1, #21
 8001b04:	430a      	orrs	r2, r1
 8001b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b08:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	0049      	lsls	r1, r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b2a:	f7ff f821 	bl	8000b70 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b32:	e00b      	b.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7ff f81c 	bl	8000b70 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d904      	bls.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b42:	2313      	movs	r3, #19
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2203      	movs	r2, #3
 8001b48:	701a      	strb	r2, [r3, #0]
        break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	d0ed      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b58:	2313      	movs	r3, #19
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d154      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b62:	4b69      	ldr	r3, [pc, #420]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b66:	23c0      	movs	r3, #192	@ 0xc0
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d019      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d014      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b7e:	4b62      	ldr	r3, [pc, #392]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	4a63      	ldr	r2, [pc, #396]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b88:	4b5f      	ldr	r3, [pc, #380]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b8e:	2180      	movs	r1, #128	@ 0x80
 8001b90:	0249      	lsls	r1, r1, #9
 8001b92:	430a      	orrs	r2, r1
 8001b94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b96:	4b5c      	ldr	r3, [pc, #368]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b9c:	495d      	ldr	r1, [pc, #372]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ba2:	4b59      	ldr	r3, [pc, #356]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d016      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe ffde 	bl	8000b70 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb8:	e00c      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ffd9 	bl	8000b70 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	4a54      	ldr	r2, [pc, #336]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d904      	bls.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001bca:	2313      	movs	r3, #19
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2203      	movs	r2, #3
 8001bd0:	701a      	strb	r2, [r3, #0]
            break;
 8001bd2:	e004      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0ed      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bde:	2313      	movs	r3, #19
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be8:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	4b44      	ldr	r3, [pc, #272]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bfc:	e00c      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bfe:	2312      	movs	r3, #18
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2213      	movs	r2, #19
 8001c04:	18ba      	adds	r2, r7, r2
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e005      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2213      	movs	r2, #19
 8001c12:	18ba      	adds	r2, r7, r2
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c18:	2311      	movs	r3, #17
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4b39      	ldr	r3, [pc, #228]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c26:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c28:	493c      	ldr	r1, [pc, #240]	@ (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c38:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b30      	ldr	r3, [pc, #192]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c56:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4013      	ands	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	01db      	lsls	r3, r3, #7
 8001c90:	4013      	ands	r3, r2
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c94:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	0899      	lsrs	r1, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	05db      	lsls	r3, r3, #23
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cb8:	2180      	movs	r1, #128	@ 0x80
 8001cba:	0249      	lsls	r1, r1, #9
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d016      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf2:	2180      	movs	r1, #128	@ 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001cfa:	2312      	movs	r3, #18
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b006      	add	sp, #24
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	fffffcff 	.word	0xfffffcff
 8001d14:	fffeffff 	.word	0xfffeffff
 8001d18:	00001388 	.word	0x00001388
 8001d1c:	efffffff 	.word	0xefffffff
 8001d20:	ffffcfff 	.word	0xffffcfff
 8001d24:	ffff3fff 	.word	0xffff3fff

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e04a      	b.n	8001dd0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	223d      	movs	r2, #61	@ 0x3d
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223c      	movs	r2, #60	@ 0x3c
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fdb3 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	223d      	movs	r2, #61	@ 0x3d
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	0019      	movs	r1, r3
 8001d68:	0010      	movs	r0, r2
 8001d6a:	f000 fab7 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2248      	movs	r2, #72	@ 0x48
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223e      	movs	r2, #62	@ 0x3e
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	223f      	movs	r2, #63	@ 0x3f
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2240      	movs	r2, #64	@ 0x40
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2241      	movs	r2, #65	@ 0x41
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2242      	movs	r2, #66	@ 0x42
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2243      	movs	r2, #67	@ 0x43
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2244      	movs	r2, #68	@ 0x44
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2245      	movs	r2, #69	@ 0x45
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2246      	movs	r2, #70	@ 0x46
 8001dba:	2101      	movs	r1, #1
 8001dbc:	5499      	strb	r1, [r3, r2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2247      	movs	r2, #71	@ 0x47
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	223d      	movs	r2, #61	@ 0x3d
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_TIM_Base_Stop+0x44>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	d10d      	bne.n	8001e08 <HAL_TIM_Base_Stop+0x30>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e20 <HAL_TIM_Base_Stop+0x48>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_Base_Stop+0x30>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	438a      	bics	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223d      	movs	r2, #61	@ 0x3d
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	00001111 	.word	0x00001111
 8001e20:	00000444 	.word	0x00000444

08001e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	223d      	movs	r2, #61	@ 0x3d
 8001e30:	5c9b      	ldrb	r3, [r3, r2]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e03c      	b.n	8001eb6 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	223d      	movs	r2, #61	@ 0x3d
 8001e40:	2102      	movs	r1, #2
 8001e42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0x4e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0x4e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xa4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d116      	bne.n	8001ea0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xa8>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d016      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0x8e>
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d011      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9e:	e008      	b.n	8001eb2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	00010007 	.word	0x00010007

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d021      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d01d      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4252      	negs	r2, r2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	d004      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 f9c8 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e007      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 f9bb 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f000 f9c7 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4013      	ands	r3, r2
 8001f42:	d01e      	beq.n	8001f82 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2205      	movs	r2, #5
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	23c0      	movs	r3, #192	@ 0xc0
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f9a1 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001f6a:	e007      	b.n	8001f7c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f994 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f9a0 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2208      	movs	r2, #8
 8001f86:	4013      	ands	r3, r2
 8001f88:	d021      	beq.n	8001fce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d01d      	beq.n	8001fce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2209      	movs	r2, #9
 8001f98:	4252      	negs	r2, r2
 8001f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 f97b 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001fb6:	e007      	b.n	8001fc8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f96e 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 f97a 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d01e      	beq.n	800201c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2211      	movs	r2, #17
 8001fe4:	4252      	negs	r2, r2
 8001fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2208      	movs	r2, #8
 8001fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	23c0      	movs	r3, #192	@ 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f954 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002004:	e007      	b.n	8002016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f947 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f953 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	d00c      	beq.n	800203e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d008      	beq.n	800203e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4252      	negs	r2, r2
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f927 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	4013      	ands	r3, r2
 8002044:	d104      	bne.n	8002050 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	019b      	lsls	r3, r3, #6
 800204c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800204e:	d00b      	beq.n	8002068 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	4013      	ands	r3, r2
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_TIM_IRQHandler+0x208>)
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 faca 	bl	80025fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d00b      	beq.n	800208a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2280      	movs	r2, #128	@ 0x80
 8002076:	4013      	ands	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_TIM_IRQHandler+0x20c>)
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f000 fac1 	bl	800260c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2240      	movs	r2, #64	@ 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2240      	movs	r2, #64	@ 0x40
 8002096:	4013      	ands	r3, r2
 8002098:	d008      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2241      	movs	r2, #65	@ 0x41
 80020a0:	4252      	negs	r2, r2
 80020a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f910 	bl	80022cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2220      	movs	r2, #32
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00c      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d008      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2221      	movs	r2, #33	@ 0x21
 80020c2:	4252      	negs	r2, r2
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fa8f 	bl	80025ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	ffffdf7f 	.word	0xffffdf7f
 80020dc:	fffffeff 	.word	0xfffffeff

080020e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	230f      	movs	r3, #15
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223c      	movs	r2, #60	@ 0x3c
 80020f6:	5c9b      	ldrb	r3, [r3, r2]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_TIM_ConfigClockSource+0x20>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0bc      	b.n	800227a <HAL_TIM_ConfigClockSource+0x19a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	223c      	movs	r2, #60	@ 0x3c
 8002104:	2101      	movs	r1, #1
 8002106:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	223d      	movs	r2, #61	@ 0x3d
 800210c:	2102      	movs	r1, #2
 800210e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4a5a      	ldr	r2, [pc, #360]	@ (8002284 <HAL_TIM_ConfigClockSource+0x1a4>)
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4a59      	ldr	r2, [pc, #356]	@ (8002288 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	0192      	lsls	r2, r2, #6
 8002138:	4293      	cmp	r3, r2
 800213a:	d040      	beq.n	80021be <HAL_TIM_ConfigClockSource+0xde>
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	0192      	lsls	r2, r2, #6
 8002140:	4293      	cmp	r3, r2
 8002142:	d900      	bls.n	8002146 <HAL_TIM_ConfigClockSource+0x66>
 8002144:	e088      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 8002146:	2280      	movs	r2, #128	@ 0x80
 8002148:	0152      	lsls	r2, r2, #5
 800214a:	4293      	cmp	r3, r2
 800214c:	d100      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x70>
 800214e:	e088      	b.n	8002262 <HAL_TIM_ConfigClockSource+0x182>
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	0152      	lsls	r2, r2, #5
 8002154:	4293      	cmp	r3, r2
 8002156:	d900      	bls.n	800215a <HAL_TIM_ConfigClockSource+0x7a>
 8002158:	e07e      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 800215a:	2b70      	cmp	r3, #112	@ 0x70
 800215c:	d018      	beq.n	8002190 <HAL_TIM_ConfigClockSource+0xb0>
 800215e:	d900      	bls.n	8002162 <HAL_TIM_ConfigClockSource+0x82>
 8002160:	e07a      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 8002162:	2b60      	cmp	r3, #96	@ 0x60
 8002164:	d04f      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x126>
 8002166:	d900      	bls.n	800216a <HAL_TIM_ConfigClockSource+0x8a>
 8002168:	e076      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 800216a:	2b50      	cmp	r3, #80	@ 0x50
 800216c:	d03b      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x106>
 800216e:	d900      	bls.n	8002172 <HAL_TIM_ConfigClockSource+0x92>
 8002170:	e072      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 8002172:	2b40      	cmp	r3, #64	@ 0x40
 8002174:	d057      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x146>
 8002176:	d900      	bls.n	800217a <HAL_TIM_ConfigClockSource+0x9a>
 8002178:	e06e      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 800217a:	2b30      	cmp	r3, #48	@ 0x30
 800217c:	d063      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x166>
 800217e:	d86b      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 8002180:	2b20      	cmp	r3, #32
 8002182:	d060      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x166>
 8002184:	d868      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d05d      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x166>
 800218a:	2b10      	cmp	r3, #16
 800218c:	d05b      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x166>
 800218e:	e063      	b.n	8002258 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021a0:	f000 f99c 	bl	80024dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2277      	movs	r2, #119	@ 0x77
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]
      break;
 80021bc:	e052      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ce:	f000 f985 	bl	80024dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	01c9      	lsls	r1, r1, #7
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
      break;
 80021e4:	e03e      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f2:	001a      	movs	r2, r3
 80021f4:	f000 f8f6 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2150      	movs	r1, #80	@ 0x50
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 f950 	bl	80024a4 <TIM_ITRx_SetConfig>
      break;
 8002204:	e02e      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002212:	001a      	movs	r2, r3
 8002214:	f000 f914 	bl	8002440 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2160      	movs	r1, #96	@ 0x60
 800221e:	0018      	movs	r0, r3
 8002220:	f000 f940 	bl	80024a4 <TIM_ITRx_SetConfig>
      break;
 8002224:	e01e      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002232:	001a      	movs	r2, r3
 8002234:	f000 f8d6 	bl	80023e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2140      	movs	r1, #64	@ 0x40
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f930 	bl	80024a4 <TIM_ITRx_SetConfig>
      break;
 8002244:	e00e      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0019      	movs	r1, r3
 8002250:	0010      	movs	r0, r2
 8002252:	f000 f927 	bl	80024a4 <TIM_ITRx_SetConfig>
      break;
 8002256:	e005      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
      break;
 8002260:	e000      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002262:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	223d      	movs	r2, #61	@ 0x3d
 8002268:	2101      	movs	r1, #1
 800226a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223c      	movs	r2, #60	@ 0x3c
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

  return status;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	ffceff88 	.word	0xffceff88
 8002288:	ffff00ff 	.word	0xffff00ff

0800228c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	46c0      	nop			@ (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a36      	ldr	r2, [pc, #216]	@ (80023c8 <TIM_Base_SetConfig+0xec>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0x20>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a35      	ldr	r2, [pc, #212]	@ (80023cc <TIM_Base_SetConfig+0xf0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d108      	bne.n	800230e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2270      	movs	r2, #112	@ 0x70
 8002300:	4393      	bics	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <TIM_Base_SetConfig+0xec>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2c      	ldr	r2, [pc, #176]	@ (80023cc <TIM_Base_SetConfig+0xf0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00f      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2b      	ldr	r2, [pc, #172]	@ (80023d0 <TIM_Base_SetConfig+0xf4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2a      	ldr	r2, [pc, #168]	@ (80023d4 <TIM_Base_SetConfig+0xf8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <TIM_Base_SetConfig+0xfc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a28      	ldr	r2, [pc, #160]	@ (80023dc <TIM_Base_SetConfig+0x100>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a27      	ldr	r2, [pc, #156]	@ (80023e0 <TIM_Base_SetConfig+0x104>)
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	4393      	bics	r3, r2
 8002356:	001a      	movs	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <TIM_Base_SetConfig+0xec>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00b      	beq.n	8002396 <TIM_Base_SetConfig+0xba>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a14      	ldr	r2, [pc, #80]	@ (80023d4 <TIM_Base_SetConfig+0xf8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <TIM_Base_SetConfig+0xba>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <TIM_Base_SetConfig+0xfc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0xba>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <TIM_Base_SetConfig+0x100>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4393      	bics	r3, r2
 80023b8:	001a      	movs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
  }
}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	46bd      	mov	sp, r7
 80023c2:	b004      	add	sp, #16
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40002000 	.word	0x40002000
 80023d4:	40014000 	.word	0x40014000
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800
 80023e0:	fffffcff 	.word	0xfffffcff

080023e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	2201      	movs	r2, #1
 80023fc:	4393      	bics	r3, r2
 80023fe:	001a      	movs	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	22f0      	movs	r2, #240	@ 0xf0
 800240e:	4393      	bics	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	220a      	movs	r2, #10
 8002420:	4393      	bics	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	621a      	str	r2, [r3, #32]
}
 8002438:	46c0      	nop			@ (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b006      	add	sp, #24
 800243e:	bd80      	pop	{r7, pc}

08002440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	2210      	movs	r2, #16
 8002458:	4393      	bics	r3, r2
 800245a:	001a      	movs	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <TIM_TI2_ConfigInputStage+0x60>)
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	031b      	lsls	r3, r3, #12
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	22a0      	movs	r2, #160	@ 0xa0
 800247c:	4393      	bics	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b006      	add	sp, #24
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	ffff0fff 	.word	0xffff0fff

080024a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <TIM_ITRx_SetConfig+0x34>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	2207      	movs	r2, #7
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	609a      	str	r2, [r3, #8]
}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	ffcfff8f 	.word	0xffcfff8f

080024dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <TIM_ETR_SetConfig+0x3c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	021a      	lsls	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	431a      	orrs	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	46c0      	nop			@ (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b006      	add	sp, #24
 8002516:	bd80      	pop	{r7, pc}
 8002518:	ffff00ff 	.word	0xffff00ff

0800251c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223c      	movs	r2, #60	@ 0x3c
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002530:	2302      	movs	r3, #2
 8002532:	e04f      	b.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	223c      	movs	r2, #60	@ 0x3c
 8002538:	2101      	movs	r1, #1
 800253a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223d      	movs	r2, #61	@ 0x3d
 8002540:	2102      	movs	r1, #2
 8002542:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a20      	ldr	r2, [pc, #128]	@ (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2270      	movs	r2, #112	@ 0x70
 8002574:	4393      	bics	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	4393      	bics	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	223d      	movs	r2, #61	@ 0x3d
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223c      	movs	r2, #60	@ 0x3c
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	ff0fffff 	.word	0xff0fffff
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40014000 	.word	0x40014000

080025ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e046      	b.n	80026bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2288      	movs	r2, #136	@ 0x88
 8002632:	589b      	ldr	r3, [r3, r2]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2284      	movs	r2, #132	@ 0x84
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f7fe f962 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2288      	movs	r2, #136	@ 0x88
 800264c:	2124      	movs	r1, #36	@ 0x24
 800264e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	438a      	bics	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f9d0 	bl	8002a10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f828 	bl	80026c8 <UART_SetConfig>
 8002678:	0003      	movs	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01c      	b.n	80026bc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	490d      	ldr	r1, [pc, #52]	@ (80026c4 <HAL_UART_Init+0xa8>)
 800268e:	400a      	ands	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	212a      	movs	r1, #42	@ 0x2a
 800269e:	438a      	bics	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fa5f 	bl	8002b78 <UART_CheckIdleState>
 80026ba:	0003      	movs	r3, r0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	ffffb7ff 	.word	0xffffb7ff

080026c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026d0:	231a      	movs	r3, #26
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4abc      	ldr	r2, [pc, #752]	@ (80029e8 <UART_SetConfig+0x320>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4ab7      	ldr	r2, [pc, #732]	@ (80029ec <UART_SetConfig+0x324>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4313      	orrs	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4aae      	ldr	r2, [pc, #696]	@ (80029f0 <UART_SetConfig+0x328>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	220f      	movs	r2, #15
 800274c:	4393      	bics	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4aa4      	ldr	r2, [pc, #656]	@ (80029f4 <UART_SetConfig+0x32c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d127      	bne.n	80027b6 <UART_SetConfig+0xee>
 8002766:	4ba4      	ldr	r3, [pc, #656]	@ (80029f8 <UART_SetConfig+0x330>)
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	2203      	movs	r2, #3
 800276c:	4013      	ands	r3, r2
 800276e:	2b03      	cmp	r3, #3
 8002770:	d017      	beq.n	80027a2 <UART_SetConfig+0xda>
 8002772:	d81b      	bhi.n	80027ac <UART_SetConfig+0xe4>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d00a      	beq.n	800278e <UART_SetConfig+0xc6>
 8002778:	d818      	bhi.n	80027ac <UART_SetConfig+0xe4>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0xbc>
 800277e:	2b01      	cmp	r3, #1
 8002780:	d00a      	beq.n	8002798 <UART_SetConfig+0xd0>
 8002782:	e013      	b.n	80027ac <UART_SetConfig+0xe4>
 8002784:	231b      	movs	r3, #27
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e058      	b.n	8002840 <UART_SetConfig+0x178>
 800278e:	231b      	movs	r3, #27
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2202      	movs	r2, #2
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e053      	b.n	8002840 <UART_SetConfig+0x178>
 8002798:	231b      	movs	r3, #27
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2204      	movs	r2, #4
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e04e      	b.n	8002840 <UART_SetConfig+0x178>
 80027a2:	231b      	movs	r3, #27
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2208      	movs	r2, #8
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e049      	b.n	8002840 <UART_SetConfig+0x178>
 80027ac:	231b      	movs	r3, #27
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2210      	movs	r2, #16
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e044      	b.n	8002840 <UART_SetConfig+0x178>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a90      	ldr	r2, [pc, #576]	@ (80029fc <UART_SetConfig+0x334>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d127      	bne.n	8002810 <UART_SetConfig+0x148>
 80027c0:	4b8d      	ldr	r3, [pc, #564]	@ (80029f8 <UART_SetConfig+0x330>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	220c      	movs	r2, #12
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d017      	beq.n	80027fc <UART_SetConfig+0x134>
 80027cc:	d81b      	bhi.n	8002806 <UART_SetConfig+0x13e>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d00a      	beq.n	80027e8 <UART_SetConfig+0x120>
 80027d2:	d818      	bhi.n	8002806 <UART_SetConfig+0x13e>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <UART_SetConfig+0x116>
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00a      	beq.n	80027f2 <UART_SetConfig+0x12a>
 80027dc:	e013      	b.n	8002806 <UART_SetConfig+0x13e>
 80027de:	231b      	movs	r3, #27
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e02b      	b.n	8002840 <UART_SetConfig+0x178>
 80027e8:	231b      	movs	r3, #27
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e026      	b.n	8002840 <UART_SetConfig+0x178>
 80027f2:	231b      	movs	r3, #27
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2204      	movs	r2, #4
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e021      	b.n	8002840 <UART_SetConfig+0x178>
 80027fc:	231b      	movs	r3, #27
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2208      	movs	r2, #8
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e01c      	b.n	8002840 <UART_SetConfig+0x178>
 8002806:	231b      	movs	r3, #27
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2210      	movs	r2, #16
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e017      	b.n	8002840 <UART_SetConfig+0x178>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7a      	ldr	r2, [pc, #488]	@ (8002a00 <UART_SetConfig+0x338>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d104      	bne.n	8002824 <UART_SetConfig+0x15c>
 800281a:	231b      	movs	r3, #27
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e00d      	b.n	8002840 <UART_SetConfig+0x178>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a76      	ldr	r2, [pc, #472]	@ (8002a04 <UART_SetConfig+0x33c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d104      	bne.n	8002838 <UART_SetConfig+0x170>
 800282e:	231b      	movs	r3, #27
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e003      	b.n	8002840 <UART_SetConfig+0x178>
 8002838:	231b      	movs	r3, #27
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2210      	movs	r2, #16
 800283e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	429a      	cmp	r2, r3
 800284a:	d000      	beq.n	800284e <UART_SetConfig+0x186>
 800284c:	e065      	b.n	800291a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800284e:	231b      	movs	r3, #27
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d015      	beq.n	8002884 <UART_SetConfig+0x1bc>
 8002858:	dc18      	bgt.n	800288c <UART_SetConfig+0x1c4>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d00d      	beq.n	800287a <UART_SetConfig+0x1b2>
 800285e:	dc15      	bgt.n	800288c <UART_SetConfig+0x1c4>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <UART_SetConfig+0x1a2>
 8002864:	2b02      	cmp	r3, #2
 8002866:	d005      	beq.n	8002874 <UART_SetConfig+0x1ac>
 8002868:	e010      	b.n	800288c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800286a:	f7ff f913 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 800286e:	0003      	movs	r3, r0
 8002870:	617b      	str	r3, [r7, #20]
        break;
 8002872:	e012      	b.n	800289a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002874:	4b64      	ldr	r3, [pc, #400]	@ (8002a08 <UART_SetConfig+0x340>)
 8002876:	617b      	str	r3, [r7, #20]
        break;
 8002878:	e00f      	b.n	800289a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800287a:	f7ff f87f 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800287e:	0003      	movs	r3, r0
 8002880:	617b      	str	r3, [r7, #20]
        break;
 8002882:	e00a      	b.n	800289a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	617b      	str	r3, [r7, #20]
        break;
 800288a:	e006      	b.n	800289a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002890:	231a      	movs	r3, #26
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
        break;
 8002898:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d100      	bne.n	80028a2 <UART_SetConfig+0x1da>
 80028a0:	e08d      	b.n	80029be <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a6:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <UART_SetConfig+0x344>)
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	5ad3      	ldrh	r3, [r2, r3]
 80028ac:	0019      	movs	r1, r3
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7fd fc26 	bl	8000100 <__udivsi3>
 80028b4:	0003      	movs	r3, r0
 80028b6:	005a      	lsls	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	18d2      	adds	r2, r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0019      	movs	r1, r3
 80028c6:	0010      	movs	r0, r2
 80028c8:	f7fd fc1a 	bl	8000100 <__udivsi3>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	d91c      	bls.n	8002910 <UART_SetConfig+0x248>
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	429a      	cmp	r2, r3
 80028de:	d217      	bcs.n	8002910 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	200e      	movs	r0, #14
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	210f      	movs	r1, #15
 80028ea:	438a      	bics	r2, r1
 80028ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2207      	movs	r2, #7
 80028f6:	4013      	ands	r3, r2
 80028f8:	b299      	uxth	r1, r3
 80028fa:	183b      	adds	r3, r7, r0
 80028fc:	183a      	adds	r2, r7, r0
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	183a      	adds	r2, r7, r0
 800290a:	8812      	ldrh	r2, [r2, #0]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	e056      	b.n	80029be <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002910:	231a      	movs	r3, #26
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e051      	b.n	80029be <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800291a:	231b      	movs	r3, #27
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d015      	beq.n	8002950 <UART_SetConfig+0x288>
 8002924:	dc18      	bgt.n	8002958 <UART_SetConfig+0x290>
 8002926:	2b04      	cmp	r3, #4
 8002928:	d00d      	beq.n	8002946 <UART_SetConfig+0x27e>
 800292a:	dc15      	bgt.n	8002958 <UART_SetConfig+0x290>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <UART_SetConfig+0x26e>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d005      	beq.n	8002940 <UART_SetConfig+0x278>
 8002934:	e010      	b.n	8002958 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002936:	f7ff f8ad 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 800293a:	0003      	movs	r3, r0
 800293c:	617b      	str	r3, [r7, #20]
        break;
 800293e:	e012      	b.n	8002966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002940:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <UART_SetConfig+0x340>)
 8002942:	617b      	str	r3, [r7, #20]
        break;
 8002944:	e00f      	b.n	8002966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002946:	f7ff f819 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800294a:	0003      	movs	r3, r0
 800294c:	617b      	str	r3, [r7, #20]
        break;
 800294e:	e00a      	b.n	8002966 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	617b      	str	r3, [r7, #20]
        break;
 8002956:	e006      	b.n	8002966 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800295c:	231a      	movs	r3, #26
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
        break;
 8002964:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d028      	beq.n	80029be <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002970:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <UART_SetConfig+0x344>)
 8002972:	0052      	lsls	r2, r2, #1
 8002974:	5ad3      	ldrh	r3, [r2, r3]
 8002976:	0019      	movs	r1, r3
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7fd fbc1 	bl	8000100 <__udivsi3>
 800297e:	0003      	movs	r3, r0
 8002980:	001a      	movs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	18d2      	adds	r2, r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0019      	movs	r1, r3
 8002990:	0010      	movs	r0, r2
 8002992:	f7fd fbb5 	bl	8000100 <__udivsi3>
 8002996:	0003      	movs	r3, r0
 8002998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d90a      	bls.n	80029b6 <UART_SetConfig+0x2ee>
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d205      	bcs.n	80029b6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e003      	b.n	80029be <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80029b6:	231a      	movs	r3, #26
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	226a      	movs	r2, #106	@ 0x6a
 80029c2:	2101      	movs	r1, #1
 80029c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2268      	movs	r2, #104	@ 0x68
 80029ca:	2101      	movs	r1, #1
 80029cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80029da:	231a      	movs	r3, #26
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	781b      	ldrb	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b008      	add	sp, #32
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	cfff69f3 	.word	0xcfff69f3
 80029ec:	ffffcfff 	.word	0xffffcfff
 80029f0:	11fff4ff 	.word	0x11fff4ff
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40004400 	.word	0x40004400
 8002a00:	40004800 	.word	0x40004800
 8002a04:	40004c00 	.word	0x40004c00
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	0800317c 	.word	0x0800317c

08002a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a4a      	ldr	r2, [pc, #296]	@ (8002b54 <UART_AdvFeatureConfig+0x144>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a43      	ldr	r2, [pc, #268]	@ (8002b58 <UART_AdvFeatureConfig+0x148>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	2202      	movs	r2, #2
 8002a62:	4013      	ands	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <UART_AdvFeatureConfig+0x14c>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	2204      	movs	r2, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4a34      	ldr	r2, [pc, #208]	@ (8002b60 <UART_AdvFeatureConfig+0x150>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b64 <UART_AdvFeatureConfig+0x154>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d00b      	beq.n	8002ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	4a25      	ldr	r2, [pc, #148]	@ (8002b68 <UART_AdvFeatureConfig+0x158>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	4013      	ands	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <UART_AdvFeatureConfig+0x15c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	035b      	lsls	r3, r3, #13
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10b      	bne.n	8002b2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a15      	ldr	r2, [pc, #84]	@ (8002b70 <UART_AdvFeatureConfig+0x160>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	2280      	movs	r2, #128	@ 0x80
 8002b30:	4013      	ands	r3, r2
 8002b32:	d00b      	beq.n	8002b4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <UART_AdvFeatureConfig+0x164>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	ffff7fff 	.word	0xffff7fff
 8002b58:	fffdffff 	.word	0xfffdffff
 8002b5c:	fffeffff 	.word	0xfffeffff
 8002b60:	fffbffff 	.word	0xfffbffff
 8002b64:	ffffefff 	.word	0xffffefff
 8002b68:	ffffdfff 	.word	0xffffdfff
 8002b6c:	ffefffff 	.word	0xffefffff
 8002b70:	ff9fffff 	.word	0xff9fffff
 8002b74:	fff7ffff 	.word	0xfff7ffff

08002b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b092      	sub	sp, #72	@ 0x48
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2290      	movs	r2, #144	@ 0x90
 8002b84:	2100      	movs	r1, #0
 8002b86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b88:	f7fd fff2 	bl	8000b70 <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2208      	movs	r2, #8
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d12d      	bne.n	8002bfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba0:	2280      	movs	r2, #128	@ 0x80
 8002ba2:	0391      	lsls	r1, r2, #14
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <UART_CheckIdleState+0x14c>)
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f000 f88e 	bl	8002ccc <UART_WaitOnFlagUntilTimeout>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d022      	beq.n	8002bfa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2180      	movs	r1, #128	@ 0x80
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be0:	f383 8810 	msr	PRIMASK, r3
}
 8002be4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2288      	movs	r2, #136	@ 0x88
 8002bea:	2120      	movs	r1, #32
 8002bec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2284      	movs	r2, #132	@ 0x84
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e060      	b.n	8002cbc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d146      	bne.n	8002c96 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	03d1      	lsls	r1, r2, #15
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc4 <UART_CheckIdleState+0x14c>)
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f000 f859 	bl	8002ccc <UART_WaitOnFlagUntilTimeout>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d03b      	beq.n	8002c96 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c22:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c24:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c28:	2301      	movs	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f383 8810 	msr	PRIMASK, r3
}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4922      	ldr	r1, [pc, #136]	@ (8002cc8 <UART_CheckIdleState+0x150>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f383 8810 	msr	PRIMASK, r3
}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c50:	f3ef 8310 	mrs	r3, PRIMASK
 8002c54:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c56:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f383 8810 	msr	PRIMASK, r3
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f383 8810 	msr	PRIMASK, r3
}
 8002c80:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	228c      	movs	r2, #140	@ 0x8c
 8002c86:	2120      	movs	r1, #32
 8002c88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2284      	movs	r2, #132	@ 0x84
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e012      	b.n	8002cbc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2288      	movs	r2, #136	@ 0x88
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	228c      	movs	r2, #140	@ 0x8c
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2284      	movs	r2, #132	@ 0x84
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b010      	add	sp, #64	@ 0x40
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	01ffffff 	.word	0x01ffffff
 8002cc8:	fffffedf 	.word	0xfffffedf

08002ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	e051      	b.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	d04e      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fd ff44 	bl	8000b70 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e051      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b80      	cmp	r3, #128	@ 0x80
 8002d0e:	d038      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b40      	cmp	r3, #64	@ 0x40
 8002d14:	d035      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d111      	bne.n	8002d48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f83c 	bl	8002dac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2290      	movs	r2, #144	@ 0x90
 8002d38:	2108      	movs	r1, #8
 8002d3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2284      	movs	r2, #132	@ 0x84
 8002d40:	2100      	movs	r1, #0
 8002d42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e02c      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	401a      	ands	r2, r3
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d112      	bne.n	8002d82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 f81f 	bl	8002dac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2290      	movs	r2, #144	@ 0x90
 8002d72:	2120      	movs	r1, #32
 8002d74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2284      	movs	r2, #132	@ 0x84
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e00f      	b.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	425a      	negs	r2, r3
 8002d92:	4153      	adcs	r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	001a      	movs	r2, r3
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d09e      	beq.n	8002cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	0018      	movs	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	@ 0x38
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	617b      	str	r3, [r7, #20]
  return(result);
 8002dba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4926      	ldr	r1, [pc, #152]	@ (8002e70 <UART_EndRxTransfer+0xc4>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dea:	623b      	str	r3, [r7, #32]
  return(result);
 8002dec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8002df0:	2301      	movs	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	f383 8810 	msr	PRIMASK, r3
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <UART_EndRxTransfer+0xc8>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	f383 8810 	msr	PRIMASK, r3
}
 8002e16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d118      	bne.n	8002e52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e20:	f3ef 8310 	mrs	r3, PRIMASK
 8002e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f383 8810 	msr	PRIMASK, r3
}
 8002e34:	46c0      	nop			@ (mov r8, r8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2110      	movs	r1, #16
 8002e42:	438a      	bics	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	228c      	movs	r2, #140	@ 0x8c
 8002e56:	2120      	movs	r1, #32
 8002e58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00e      	add	sp, #56	@ 0x38
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	fffffedf 	.word	0xfffffedf
 8002e74:	effffffe 	.word	0xeffffffe

08002e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2284      	movs	r2, #132	@ 0x84
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e027      	b.n	8002ede <HAL_UARTEx_DisableFifoMode+0x66>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2284      	movs	r2, #132	@ 0x84
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2288      	movs	r2, #136	@ 0x88
 8002e9a:	2124      	movs	r1, #36	@ 0x24
 8002e9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2288      	movs	r2, #136	@ 0x88
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2284      	movs	r2, #132	@ 0x84
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	dfffffff 	.word	0xdfffffff

08002eec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2284      	movs	r2, #132	@ 0x84
 8002efa:	5c9b      	ldrb	r3, [r3, r2]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e02e      	b.n	8002f62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2284      	movs	r2, #132	@ 0x84
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2288      	movs	r2, #136	@ 0x88
 8002f10:	2124      	movs	r1, #36	@ 0x24
 8002f12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	08d9      	lsrs	r1, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f854 	bl	8002ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2288      	movs	r2, #136	@ 0x88
 8002f54:	2120      	movs	r1, #32
 8002f56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2284      	movs	r2, #132	@ 0x84
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2284      	movs	r2, #132	@ 0x84
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e02f      	b.n	8002fe4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2284      	movs	r2, #132	@ 0x84
 8002f88:	2101      	movs	r1, #1
 8002f8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2288      	movs	r2, #136	@ 0x88
 8002f90:	2124      	movs	r1, #36	@ 0x24
 8002f92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	438a      	bics	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f813 	bl	8002ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2288      	movs	r2, #136	@ 0x88
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2284      	movs	r2, #132	@ 0x84
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f1ffffff 	.word	0xf1ffffff

08002ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	226a      	movs	r2, #106	@ 0x6a
 8003004:	2101      	movs	r1, #1
 8003006:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2268      	movs	r2, #104	@ 0x68
 800300c:	2101      	movs	r1, #1
 800300e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003010:	e043      	b.n	800309a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003012:	260f      	movs	r6, #15
 8003014:	19bb      	adds	r3, r7, r6
 8003016:	2208      	movs	r2, #8
 8003018:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800301a:	200e      	movs	r0, #14
 800301c:	183b      	adds	r3, r7, r0
 800301e:	2208      	movs	r2, #8
 8003020:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	0e5b      	lsrs	r3, r3, #25
 800302a:	b2da      	uxtb	r2, r3
 800302c:	240d      	movs	r4, #13
 800302e:	193b      	adds	r3, r7, r4
 8003030:	2107      	movs	r1, #7
 8003032:	400a      	ands	r2, r1
 8003034:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	0f5b      	lsrs	r3, r3, #29
 800303e:	b2da      	uxtb	r2, r3
 8003040:	250c      	movs	r5, #12
 8003042:	197b      	adds	r3, r7, r5
 8003044:	2107      	movs	r1, #7
 8003046:	400a      	ands	r2, r1
 8003048:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800304a:	183b      	adds	r3, r7, r0
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	197a      	adds	r2, r7, r5
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	4914      	ldr	r1, [pc, #80]	@ (80030a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003054:	5c8a      	ldrb	r2, [r1, r2]
 8003056:	435a      	muls	r2, r3
 8003058:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800305a:	197b      	adds	r3, r7, r5
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003062:	0019      	movs	r1, r3
 8003064:	f7fd f8d6 	bl	8000214 <__divsi3>
 8003068:	0003      	movs	r3, r0
 800306a:	b299      	uxth	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	226a      	movs	r2, #106	@ 0x6a
 8003070:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003072:	19bb      	adds	r3, r7, r6
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	193a      	adds	r2, r7, r4
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	490a      	ldr	r1, [pc, #40]	@ (80030a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800307c:	5c8a      	ldrb	r2, [r1, r2]
 800307e:	435a      	muls	r2, r3
 8003080:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003082:	193b      	adds	r3, r7, r4
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800308a:	0019      	movs	r1, r3
 800308c:	f7fd f8c2 	bl	8000214 <__divsi3>
 8003090:	0003      	movs	r3, r0
 8003092:	b299      	uxth	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2268      	movs	r2, #104	@ 0x68
 8003098:	5299      	strh	r1, [r3, r2]
}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b005      	add	sp, #20
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	08003194 	.word	0x08003194
 80030a8:	0800319c 	.word	0x0800319c

080030ac <memset>:
 80030ac:	0003      	movs	r3, r0
 80030ae:	1882      	adds	r2, r0, r2
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	7019      	strb	r1, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	2600      	movs	r6, #0
 80030c0:	4c0c      	ldr	r4, [pc, #48]	@ (80030f4 <__libc_init_array+0x38>)
 80030c2:	4d0d      	ldr	r5, [pc, #52]	@ (80030f8 <__libc_init_array+0x3c>)
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	2600      	movs	r6, #0
 80030ce:	f000 f819 	bl	8003104 <_init>
 80030d2:	4c0a      	ldr	r4, [pc, #40]	@ (80030fc <__libc_init_array+0x40>)
 80030d4:	4d0a      	ldr	r5, [pc, #40]	@ (8003100 <__libc_init_array+0x44>)
 80030d6:	1b64      	subs	r4, r4, r5
 80030d8:	10a4      	asrs	r4, r4, #2
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	00b3      	lsls	r3, r6, #2
 80030e2:	58eb      	ldr	r3, [r5, r3]
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	00b3      	lsls	r3, r6, #2
 80030ec:	58eb      	ldr	r3, [r5, r3]
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	080031a4 	.word	0x080031a4
 80030f8:	080031a4 	.word	0x080031a4
 80030fc:	080031a8 	.word	0x080031a8
 8003100:	080031a4 	.word	0x080031a4

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
